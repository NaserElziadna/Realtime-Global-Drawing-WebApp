@{
    ViewData["Title"] = "Home Page";
}

<!-- Login Modal -->
<div class="modal fade" id="loginModal" data-backdrop="static" data-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Welcome to Drawing Room</h5>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="userName">Please enter your name:</label>
                    <input type="text" class="form-control" id="userName" required autocomplete="name">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary btn-block" id="joinRoom">Join Room</button>
            </div>
        </div>
    </div>
</div>



    <div class="app-container">
        <!-- Canvas Area -->
        <partial name="_CanvasPartial" />
        
        <!-- Chat Sidebar -->
        <partial name="_ChatPartial" />
    </div>

<!-- File Saved Modal -->
<div class="modal fade" id="file-saved-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Your Infiniboard</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>
                    To load this Infiniboard file in the future, just drag and drop the <span class="text-monospace">infiniboard.json</span>
                    file onto a fresh Infiniboard room.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Help Modal -->
<div class="modal fade" id="help-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Infiniboard controls</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table table-borderless">
                        <tbody>
                            <tr>
                                <td class="font-weight-bold">Drawing</td>
                                <td>🖱️ Left click / ☝️ Single-finger-touch</td>
                            </tr>
                            <tr>
                                <td class="font-weight-bold">Moving</td>
                                <td>🖱️ Right click / ✌️ Two-finger-touch</td>
                            </tr>
                            <tr>
                                <td class="font-weight-bold">Zooming</td>
                                <td>🖱️ Scroll wheel / 🤏 Pinch</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-block" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to get cookie value
    function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for(var i=0;i < ca.length;i++) {
            var c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1,c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
        }
        return null;
    }

    // Function to show user info
    function showUserInfo(userName) {
        // Show the signout button
        $('#signout-btn').removeClass('d-none');
    }

    // Function to logout
    function logout() {
        if (confirm('Are you sure you want to logout?')) {
            // Clear local storage and cookies
            localStorage.removeItem('userName');
            window.userName = '';
            
            // Post to server to clear session
            $.post('/Home/Logout', function() {
                location.reload();
            });
        }
    }

    // Function to check if user is already logged in
    function checkExistingUser() {
        // Check multiple sources for existing user
        var cookieUserName = getCookie('UserName');
        var sessionUserName = '@Html.Raw(Json.Serialize(ViewBag.UserName))';
        var localUserName = localStorage.getItem('userName');
        
        // Clean up the session variable (remove Razor syntax artifacts)
        if (sessionUserName && sessionUserName !== null && sessionUserName !== '""' && sessionUserName.length > 2) {
            return sessionUserName.replace(/^"|"$/g, ''); // Remove surrounding quotes
        }
        
        // Check cookie
        if (cookieUserName && cookieUserName.length > 0 && cookieUserName !== 'null') {
            return cookieUserName;
        }
        
        // Check localStorage
        if (localUserName && localUserName.length > 0 && localUserName !== 'null') {
            return localUserName;
        }
        
        return null;
    }

    // Show the login modal on page load only if user is not already logged in
    $(document).ready(function () {
        // Check if user is already logged in
        var existingUserName = checkExistingUser();
        
        if (existingUserName) {
            console.log('User already logged in as:', existingUserName);
            // User already has a name, skip modal and join directly
            window.userName = existingUserName;
            showUserInfo(existingUserName);
            
            // Wait for SignalR connection to be ready before joining
            if (connection.state === signalR.HubConnectionState.Connected) {
                connection.invoke('JoinRoom', existingUserName);
            } else {
                connection.start().then(function() {
                    connection.invoke('JoinRoom', existingUserName);
                });
            }
            
            // Notify chat.js
            window.dispatchEvent(new CustomEvent('userNameSet', { detail: existingUserName }));
        } else {
            console.log('No existing user found, showing login modal');
            // No existing user found, show login modal
            $('#loginModal').modal('show');
        }
        
        // Handle Enter key in username field
        $('#userName').keypress(function(e) {
            if (e.which === 13) {
                $('#joinRoom').click();
                return false;
            }
        });
    });

    // Join room button click event
    $('#joinRoom').click(function () {
        var userName = $('#userName').val().trim();
        if (userName) {
            window.userName = userName;
            
            // Save to session and cookie via server
            $.post('/Home/SetUserName', { userName: userName }, function() {
                localStorage.setItem('userName', userName);
                connection.invoke('JoinRoom', userName);
                $('#loginModal').modal('hide');
                
                // Show user info
                showUserInfo(userName);
                
                // Notify chat.js
                window.dispatchEvent(new CustomEvent('userNameSet', { detail: userName }));
            });
        } else {
            alert('Please enter your name');
        }
    });
</script>
