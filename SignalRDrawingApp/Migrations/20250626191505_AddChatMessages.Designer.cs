// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalRDrawingApp.Data;

#nullable disable

namespace SignalRDrawingApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250626191505_AddChatMessages")]
    partial class AddChatMessages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SignalRDrawingApp.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrawingSessionId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrawingSessionId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("SignalRDrawingApp.Models.DrawingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrawingSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackgroundColor = "#FFFFFF",
                            CreatedAt = new DateTime(2025, 6, 26, 19, 15, 5, 606, DateTimeKind.Utc).AddTicks(6198),
                            Name = "Default Session"
                        });
                });

            modelBuilder.Entity("SignalRDrawingApp.Models.DrawingStroke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrawingSessionId")
                        .HasColumnType("int");

                    b.Property<string>("StrokeData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrawingSessionId");

                    b.ToTable("DrawingStrokes");
                });

            modelBuilder.Entity("SignalRDrawingApp.Models.ChatMessage", b =>
                {
                    b.HasOne("SignalRDrawingApp.Models.DrawingSession", "DrawingSession")
                        .WithMany("ChatMessages")
                        .HasForeignKey("DrawingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawingSession");
                });

            modelBuilder.Entity("SignalRDrawingApp.Models.DrawingStroke", b =>
                {
                    b.HasOne("SignalRDrawingApp.Models.DrawingSession", "DrawingSession")
                        .WithMany("Strokes")
                        .HasForeignKey("DrawingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawingSession");
                });

            modelBuilder.Entity("SignalRDrawingApp.Models.DrawingSession", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Strokes");
                });
#pragma warning restore 612, 618
        }
    }
}
